<?php

/**
 * @file
 * fetch data from taobao and, generate the report for product ranking
 */

function tbtrack_menu() {
  $menu = array();
  $menu['tbtrack/debug/fetch_data'] = array(
    'title' => 'Taobao tracker',
    'page callback' => '_tbtrack_debug_fetch_data',
    'access callback' => TRUE,
  );

  $menu['tbtrack/fetch_all'] = array(
    'title' => 'Taobao track fetch all',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tbtrack_fetch_all_form'),
    'access callback' => TRUE,
  );

  $menu['tbtrack/ranking_query'] = array(
    'title' => 'Taobao track form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tbtrack_ranking_query_form'),
    'access callback' => TRUE,
  );

  return $menu;
}



/**
 * debug fetch data from taobao by drupal_http_request
 */
function _tbtrack_debug_fetch_data() {
  $output = array();



  return $output;
}

/**
 * fetch all form
 */
function tbtrack_fetch_all_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Query'),
  );

  return $form;
}

/**
 * Submit handler for tbtrack_fetch_all_form
 */
function tbtrack_fetch_all_form_submit() {
  // query database and get records of product
  $ids = db_select('node', 'n')->fields('n', array('nid'))
    ->condition('type', 'products')
    ->execute()
    ->fetchCol();

  if ($ids) {
    // flat keywords from products
    $keywords = array();
    foreach ($ids as $id) {
      $product = entity_metadata_wrapper('node', $id);
      foreach ($product->field_keywords->value() as $keyword) {
        $keywords[] = array(
          'name' => $keyword->name,
          'product_id' => $product->field_product_id->value()
        );
      }
    }

    $batch = array(
      'operations' => array(
        array('_tbtrack_batch_fetch_process', array($keywords))
      ),
      'finished' => '_tbtrack_batch_fetch_finished',
      'title' => t('Processing'),
      // We use a single multi-pass operation, so the default
      // 'Remaining x of y operations' message will be confusing here.
      'progress_message' => '',
      'error_message' => t('The fetch ranking has encountered an error.'),
      // The operations do not live in the .module file, so we need to
      // tell the batch engine which file to load before calling them.
      'file' => drupal_get_path('module', 'tbtrack') . '/tbtrack.module',
    );
    batch_set($batch);
  } else {
    drupal_set_message(t('no product!'));
  }
}

/**
 * Ranking Batch fetch process
 */
function _tbtrack_batch_fetch_process($keywords, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($keywords);
    $context['sandbox']['keywords'] = $keywords;
  }

  // Process nodes by groups of 1.
  $keyword = array_shift($context['sandbox']['keywords']);
  // Update our progress information.
  $context['sandbox']['progress']++;

  $ranking = 0;

  dd(t('keyword is !keyword product id is !product_id', array(
        '!keyword' => $keyword['name'],
        '!product_id' => $keyword['product_id'],
      )));

  $result = _tbtrack_fetch_data($keyword['name'], $keyword['product_id'], $ranking);
  if ($result) {
    dd(t('ranking is !ranking', array('!ranking' => $ranking)));
    tbtrack_ranking_insert($keyword['name'], $keyword['product_id'], $ranking);
  } else {
    dd(t('out of ranking'));
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Ranking batch fetch finished callback
 */
function _tbtrack_batch_fetch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The ranking fetch has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', array('items' => $results));
    drupal_set_message($message);
  }
}

/**
 * insert ranking info into database
 */
function tbtrack_ranking_insert($keyword, $product_id, $ranking) {
  return db_insert('tbtrack_ranking')->fields(array(
      'keyword' => $keyword,
      'product_id' => $product_id,
      'ranking' => $ranking,
      'created' => time()
    ))->execute();
}

/**
 * ranking query form
 */
function tbtrack_ranking_query_form($form, &$form_state) {
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword'),
    '#required' => TRUE,
    '#default_value' => isset($form_state['values']['keyword']) ? $form_state['values']['keyword'] : ''
  );

  $form['product_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Product ID'),
    '#required' => TRUE,
    '#default_value' => isset($form_state['values']['product_id']) ? $form_state['values']['product_id'] : ''
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Query'),
    '#weight' => 100,
  );

  return $form;
}

/**
 * Validation handler for tbtrack_ranking_query_form
 */
function tbtrack_ranking_query_form_validate($form, &$form_state) {
}

/**
 * Submit handler for tbtrack_ranking_query_form
 */
function tbtrack_ranking_query_form_submit($form, &$form_state) {
  $output = array();

  $keyword = $form_state['values']['keyword'];
  $product_id = $form_state['values']['product_id'];

  $ranking = 0;
  $result = _tbtrack_fetch_data($keyword, $product_id, $ranking);

  if ($result) {
    drupal_set_message(t('Keywords is "!keyword" and product ID is "!product_id", ranking is !ranking. <br/>Product info: !product_info',
        array('!keyword' => $keyword, '!product_id' => $product_id, '!ranking' => $ranking, '!product_info' => $result->plaintext)));
  } else {
    drupal_set_message(t('not found'));
  }
}

/**
 * fetch data function
 */
function _tbtrack_fetch_data($keyword, $product_id, &$ranking = 0, $page_offset = NULL) {
  $old_keyword = $keyword;
  $keyword = iconv('UTF-8', 'GBK', $old_keyword);

  // TODO configurable page size
  $page_size = 60;

  // build request params
  $host = "http://list.tmall.com";
  $path = "/search_dispatcher.htm";

  $headers = array();

  // TODO configurable header info
  $options['max_redirects'] = 255;
  $options['headers']['User-Agent'] = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:17.0) Gecko/20100101 Firefox/17.0';

  // build url
  if ($page_offset === NULL) {
    $url = $host . $path . "?q=" . urlencode($keyword);
  } else {
    $url = $host . $path
      . "?q=" . urlencode($keyword)
      . "&n=" . $page_size
      . "&s=" . $page_offset;
  }

  // send request
  $response = drupal_http_request($url, $options);

  // process result
  if ($response->code == 200) {
    $html = str_get_html(iconv('GBK', 'UTF-8', $response->data));
    foreach ($html->find('#J_ItemList div.product') as $e) {
      $ranking ++;
      $property = 'data-id';
      if ($e->{$property} == $product_id) {
        return $e;
      }
    }
  }
  // TODO configurable page limit
  if ($ranking >= $page_size && $ranking < $page_size * 10 ) {
    return _tbtrack_fetch_data($old_keyword, $product_id, $ranking, $ranking);
  }
  return FALSE;
}