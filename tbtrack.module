<?php

/**
 * @file
 * fetch data from taobao and, generate the report for product ranking
 */

define('TBTRACK_RANKING_TABLE_TYPE_ALL', 100);
define('TBTRACK_RANKING_TABLE_TYPE_AVG', 101);

function tbtrack_menu() {
  $menu = array();

  $menu['tbtrack'] = array(
    'title' => 'Taobao tracker instructions',
    'page callback' => 'tbtrack_instructions',
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  $menu['tbtrack/ranking'] = array(
    'title' => 'Taobao tracker ranking instructions',
    'page callback' => 'tbtrack_ranking_instructions',
    'access callback' => TRUE,
    'file' => 'tbtrack.ranking.inc',
    'expanded' => TRUE,
  );

  $menu['tbtrack/ranking/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Instructions',
    'weight' => 1,
  );

  $menu['tbtrack/ranking/all'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Taobao track fetch all',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tbtrack_ranking_query_all_form'),
    'access callback' => TRUE,
    'file' => 'tbtrack.ranking.inc',
    'weight' => 10,
  );

  $menu['tbtrack/ranking/query'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Taobao track form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tbtrack_ranking_query_form'),
    'access callback' => TRUE,
    'file' => 'tbtrack.ranking.inc',
    'weight' => 5,
  );

  $items['node/%node/tbtrack'] = array(
    'title' => 'Taobao tracker',
    'page callback' => 'tbtrack_ranking_product_report_default',
    'page arguments' => array(1),
    'access arguments' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file' => 'tbtrack.pages.inc',
    'weight' => 100,
  );

  return $menu;
}

/**
 * tbtrack module instructions callback
 */
function tbtrack_instructions() {
  $output = array();
  return $output;
}

/**
 * render helper function
 */
function _tbtrack_add_div($markup, $element) {
  return "<div style='display:block'>" . $markup . "</div>";
}

/**
 * implements hook_tbtrack_platform_attach_params()
 */
function tbtrack_tbtrack_platform_attach_params() {
  $params = array();
  $params['ranking'] = array(
    'search host' => array(
      '#required' => TRUE,
    ),
    'search path' => array(
      '#required' => TRUE,
    ),
    'selector callback' => array(
      '#required' => TRUE,
    ),
    'selector formula' => array(
      '#required' => TRUE,
    ),
    'page size' => array(
      '#required' => FALSE,
      '#default_value' => 60,
    ),
    'charset' => array(
      '#required' => FALSE,
      '#default_value' => 'UTF-8',
    ),
  );
  return $params;
}

/**
 * Receive platform data from defined in this function and hook returns
 */
function tbtrack_get_platform_info() {
  $platforms = &drupal_static(__FUNCTION__);
  if (!isset($platforms)) {
    $platforms = module_invoke_all('tbtrack_platform_info');
  }
  return $platforms;
}

/**
 * The function load detail platform informations, and this function well
 * attach default value by hook_tbtrack_platform_attach_info that hook can
 * define module self platform informations.
 */
function tbtrack_load_platform_info($name, $plugin = NULL) {
  $platforms_attached = &drupal_static(__FUNCTION__);

  if (isset($platforms_attached[$name])) {
    if ($plugin !== NULL && !isset($platforms_attached[$name][$plugin])) {
      watchdog('tbtrack', 'tbtrack plugin !plugin not defined for !name platform',
        array('!plugin' => $plugin,  '!name' => $name));
      return NULL;
    } else {
      return $platforms_attached[$name];
    }
  }
  $platforms = tbtrack_get_platform_info();
  if (!isset($platforms[$name])) {
    return NULL;
  }
  $attach = module_invoke_all('tbtrack_platform_attach_params');

  // validtion plugin params
  foreach ($attach as $plugin_name => $definitions) {
    if (!isset($platforms[$name][$plugin_name])) {
      continue;
    }
    foreach ($definitions as $param_name => $definition) {
      if (empty($platforms[$name][$plugin_name][$param_name])) {
        if ($definition['#required']) {
          watchdog('tbtrack', 'tbtrack plugin !plugin parameter !param must be specified',
            array('!plugin' => $plugin_name, '!param' => $param_name));
          break;
        } else {
          $platforms[$name][$plugin_name][$param_name] = $definition['#default_value'];
        }
      }
    }
  }
  $platforms_attached[$name] = $platforms[$name];
  return $platforms_attached[$name];
}

/**
 * create product id field for product node
 */
function tbtrack_create_field_product_id($field_name, $label) {
  // create id field for tmall product
  $field = array(
    'field_name' => $field_name,
    'cardinality' => 1,
    'type' => 'text',
    'settings'    => array(
      'max_length' => 60,
    ),
  );

  if (!field_info_field($field_name)) {
    field_create_field($field);
  }

  // create id field instance
  $instance = array(
    'entity_type' => 'node',
    'bundle' => 'products',
    'field_name' => $field_name,
    'label' => $label,
    'widget' => array(
      'type' => 'text_textfield',
    ),
  );
  if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
  }
}

/**
 * delete product id field by field_name
 */
function tbtrack_delete_field_product_id($field_name) {
  if (field_info_field($field_name)) {
    field_delete_field($field_name);
  }
  $instance = array(
    'entity_type' => 'node',
    'field_name' => $field_name,
    'bundle' => 'products',
  );
  if (field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
    field_delete_instance($instance);
  }
}

/**
 * Implements hook_node_view().
 */
function tbtrack_node_view($node, $view_mode) {
  if ($view_mode == 'full' && $node->type == 'products') {
    foreach (tbtrack_get_platform_info() as $name => $platform) {
      module_invoke_all('tbtrack_product_node_view', $node, $view_mode, $name);
    }
  }
}

/**
 * implements hook_tbtrack_product_node_view()
 */
function tbtrack_tbtrack_product_node_view($node, $view_mode, $platform) {
  $product = entity_metadata_wrapper('node', $node->nid);

  $node->content['ranking ' . $platform]['#post_render'] = array('_tbtrack_add_div');

  $node->content['ranking ' . $platform]['title'] = array(
    '#markup' => t('Information for platform !platform', array('!platform' => $platform)),
    '#post_render' => array('_tbtrack_add_div'),
  );

  $node->content['ranking ' . $platform]['all table'] = tbtrack_ranking_build_table($product, $platform, TBTRACK_RANKING_TABLE_TYPE_ALL);
  $node->content['ranking ' . $platform]['avg table'] = tbtrack_ranking_build_table($product, $platform, TBTRACK_RANKING_TABLE_TYPE_AVG);
  $node->content['ranking ' . $platform]['form'] = drupal_get_form('tbtrack_ranking_query_' . $platform . '_product_form', $product, $platform);
}

/**
 * implements hook_forms()
 */
function tbtrack_forms($form_id, $args) {
  $forms = array();

  foreach (tbtrack_get_platform_info() as $name => $platform) {
    $forms['tbtrack_ranking_query_' . $name . '_product_form'] = array(
      'callback' => 'tbtrack_query_product_button',
    );
  }

  return $forms;
}

/**
 * update product ranking info form
 * @param EntityMetadataWrapper $product
 * @param String $platform platform id (name)
 * @param Array $platform_info
 */
function tbtrack_query_product_button($form, &$form_state, $product, $platform) {
  $platform_info = tbtrack_load_platform_info($platform);

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $product->nid->value(),
  );

  $form['product_id'] = array(
    '#type' => 'hidden',
    '#value' => $product->$platform_info['field']->value(),
  );

  $form['platform'] = array(
    '#type' => 'hidden',
    '#value' => $platform,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update !platform ranking', array('!platform' => $platform)),
  );

  $form['#submit'][] = 'tbtrack_ranking_query_product_form_submit';

  return $form;
}

/**
 * submit callback for tbtrack_ranking_query_product_form
 */
function tbtrack_ranking_query_product_form_submit($form, &$form_state) {
  if (empty($form_state['values']['product_id'])) {
    drupal_set_message(t('product id not define!'));
    return FALSE;
  }

  $keywords = array();
  $product = entity_metadata_wrapper('node', $form_state['values']['nid']);
  // all keywords for product
  foreach ($product->field_keywords->value() as $keyword) {
    $keywords[] = array(
      'name' => $keyword->name,
      'product_id' => $form_state['values']['product_id'],
      'platform' => $form_state['values']['platform'],
    );
  }
  tbtrack_ranking_batch_query_helper($keywords);
}

/**
 * tbtrack ranking betch query helper
 */
function tbtrack_ranking_batch_query_helper($keywords) {
  $batch = array(
    'operations' => array(
      array('_tbtrack_ranking_batch_query_process', array($keywords))
    ),
    'finished' => '_tbtrack_ranking_batch_query_finished',
    'title' => t('Processing'),
    // We use a single multi-pass operation, so the default
    // 'Remaining x of y operations' message will be confusing here.
    'progress_message' => '',
    'error_message' => t('The fetch ranking has encountered an error.'),
    // The operations do not live in the .module file, so we need to
    // tell the batch engine which file to load before calling them.
    'file' => drupal_get_path('module', 'tbtrack') . '/tbtrack.ranking.inc',
  );
  batch_set($batch);
}

/**
 * table 'factory' function
 */
function tbtrack_ranking_build_table($product, $platform, $type) {
  switch($type) {
    case TBTRACK_RANKING_TABLE_TYPE_ALL:
      return _tbtrack_ranking_build_table_all($product, $platform);
    case TBTRACK_RANKING_TABLE_TYPE_AVG:
      return _tbtrack_ranking_build_table_avg($product, $platform);
  }
}

/**
 * buidler for total records table
 */
function _tbtrack_ranking_build_table_all($product, $platform) {
  $platform_info = tbtrack_load_platform_info($platform);

  // define table header
  $header = array(
    'keyword' => array('data' => t('Keyword'), 'field' => 'keyword'),
    'ranking' => array('data' => t('Ranking'), 'field' => 'ranking'),
    'created' => array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc'),
  );

  // run db select query
  $query = db_select('tbtrack_ranking', 'r')->fields('r')
    ->extend('TableSort')
    ->extend('PagerDefault');

  $query->orderByHeader($header);

  $result = $query->condition('product_id', $product->{$platform_info['field']}->value())
    ->condition('platform', $platform)
    ->limit(10)
    ->execute();

  $rows = array();
  while ($record = $result->fetchAssoc()) {
    $rows[$record['rid']] = array(
      'keyword' => $record['keyword'],
      'ranking' => $record['ranking'],
      'created' => format_date($record['created'], 'short'),
    );
  }

  return array(
    'table' => array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('No content available.'),
    ),
    'pager' => array(
      '#theme' => 'pager'
    )
  );
}

function _tbtrack_ranking_build_table_avg($product, $platform) {
  $platform_info = tbtrack_load_platform_info($platform);
  $query = db_select('tbtrack_ranking', 'r')->fields('r', array('rid', 'keyword'));
  $query->addExpression('AVG(ranking)', 'avg_ranking');
  $query->groupBy('keyword');

  $query->condition('product_id', $product->{$platform_info['field']}->value())
    ->condition('platform', $platform);

  $result = $query->execute();

  $rows = array();
  while ($record = $result->fetchAssoc()) {
    $rows[$record['rid']] = array(
      'keyword' => $record['keyword'],
      'ranking' => (int)$record['avg_ranking'],
    );
  }
  // define table header
  $header = array(
    'keyword' => array('data' => t('Keyword'), 'field' => 'keyword'),
    'ranking' => array('data' => t('Ranking Avg'), 'field' => 'ranking'),
  );
  return array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No content available.'),
  );
}

